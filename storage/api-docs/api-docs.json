{
    "openapi": "3.0.0",
    "info": {
        "title": "FoodHero API",
        "description": "API para autenticação e gerenciamento de usuários",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000/api",
            "description": "API Local"
        }
    ],
    "paths": {
        "/admin/users": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Get all users (admin only)",
                "description": "Requires the user to have the 'admin' role.",
                "operationId": "adminGetUsers",
                "responses": {
                    "200": {
                        "description": "List of users"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden (not admin)"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/admin/users/{id}": {
            "delete": {
                "tags": [
                    "Admin"
                ],
                "summary": "Delete a user (admin only)",
                "description": "Requires the user to have the 'admin' role.",
                "operationId": "adminDeleteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden (not admin)"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/admin/users/{id}/promote": {
            "put": {
                "tags": [
                    "Admin"
                ],
                "summary": "Promote a user to admin (admin only)",
                "description": "Requires the user to have the 'admin' role.",
                "operationId": "adminPromoteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to promote",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User promoted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden (not admin)"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/admin/users/{id}/demote": {
            "put": {
                "tags": [
                    "Admin"
                ],
                "summary": "Demote a user from admin (admin only)",
                "description": "Requires the user to have the 'admin' role.",
                "operationId": "adminDemoteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to demote",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User demoted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden (not admin)"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/auth/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "operationId": "authRegister",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "john@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "secret123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate user and return token",
                "operationId": "authLogin",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "john@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "secret123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful"
                    },
                    "401": {
                        "description": "Invalid credentials"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Logout user",
                "operationId": "authLogout",
                "responses": {
                    "200": {
                        "description": "Logged out successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/auth/me": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Get current user",
                "operationId": "authMe",
                "responses": {
                    "200": {
                        "description": "User data returned"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/auth/delete": {
            "delete": {
                "tags": [
                    "Auth"
                ],
                "summary": "Delete authenticated user",
                "operationId": "authDelete",
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/products/favorites": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get Favorite Products",
                "description": "Retrieve a list of favorite products for the authenticated user.",
                "operationId": "getFavoriteProducts",
                "responses": {
                    "200": {
                        "description": "A list of favorite products.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductDTO"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. User must be authenticated."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Store Favorite Product",
                "description": "Store a product as a favorite for the authenticated user.",
                "operationId": "storeFavoriteProduct",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "api_id"
                                ],
                                "properties": {
                                    "api_id": {
                                        "description": "The API ID of the product to favorite.",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product successfully added to favorites.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductDTO"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Bad request. Invalid input data."
                    },
                    "401": {
                        "description": "Unauthorized. User must be authenticated."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/products/favorites/{id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Show Favorite Product",
                "description": "Retrieve a specific favorite product by its ID for the authenticated user.",
                "operationId": "showFavoriteProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the favorite product to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the favorite product.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductDTO"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found. The specified favorite product does not exist."
                    },
                    "401": {
                        "description": "Unauthorized. User must be authenticated."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Destroy Favorite Product",
                "description": "Remove a product from the authenticated user's favorites.",
                "operationId": "destroyFavoriteProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the favorite product to remove.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Product successfully removed from favorites."
                    },
                    "404": {
                        "description": "Not found. The specified favorite product does not exist."
                    },
                    "401": {
                        "description": "Unauthorized. User must be authenticated."
                    },
                    "409": {
                        "description": "Conflict. The product is already in the user's favorites."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get all products",
                "description": "Fetches a list of all products from the API.",
                "operationId": "getAllProducts",
                "responses": {
                    "200": {
                        "description": "List of products"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/products/{id}/find": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get a product by ID",
                "description": "Fetches a single product by its ID from the API.",
                "operationId": "getProductById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product details"
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ProductDTO": {
                "title": "ProductDTO",
                "description": "Product Data Transfer Object",
                "required": [
                    "id",
                    "title",
                    "price",
                    "category",
                    "image"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "type": "string",
                        "example": "Sample Product"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 99.99
                    },
                    "description": {
                        "type": "string",
                        "example": "Product description",
                        "nullable": true
                    },
                    "category": {
                        "type": "string",
                        "example": "Electronics"
                    },
                    "image": {
                        "type": "string",
                        "example": "https://example.com/image.png"
                    },
                    "rating": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RatingDTO"
                            }
                        ],
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "RatingDTO": {
                "title": "RatingDTO",
                "description": "Product rating details",
                "required": [
                    "rate",
                    "count"
                ],
                "properties": {
                    "rate": {
                        "type": "number",
                        "format": "float",
                        "example": 4.5
                    },
                    "count": {
                        "type": "integer",
                        "example": 100
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "sanctum": {
                "type": "http",
                "description": "Use o token JWT para autenticação. O token deve ser incluído no cabeçalho",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Admin",
            "description": "Admin"
        },
        {
            "name": "Auth",
            "description": "Auth"
        },
        {
            "name": "Products",
            "description": "Products"
        }
    ]
}